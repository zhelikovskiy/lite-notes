openapi: 3.0.0
info:
  title: Lite Notes Server API
  description: API documentation for Lite Notes Server
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local server
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDto'
            examples:
              objectExample:
                $ref: '#/components/examples/RegisterUserData'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
            examples:
              objectExample:
                $ref: '#/components/examples/AdminLoginData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users:
    get:
      tags:
        - users
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
components:
  examples:
    RegisterUserData:
      summary: Example of RegisterUserDto
      value:
        email: 'user@example.com'
        name: 'John Doe'
        password: 'password123'
        image: 'http://example.com/image.jpg'
    AdminLoginData:
      summary: Example of LoginUserDto for admin
      value:
        email: 'admin@admin.com'
        password: '1234'
  schemas:
    RegisterUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
          format: password
        image:
          type: string
          format: uri
      required:
        - email
        - name
        - password
    LoginUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    UserDto:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        passwordHash:
          type: string
        role:
          type: string
          enum:
            - user
            - admin
        image:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
